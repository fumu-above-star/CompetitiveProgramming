#include <iostream> //spfp
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <utility> //pair
#include <queue>
#include <set>
#include <iomanip>//setprecision
using namespace std;
using Graph = vector<vector<int> >;
using P = pair<int,int>;

long long mod = 998244353;
 
const long long INF = 1LL << 60;//LL忘れ
const double PI = 3.1415926535;
using ll = long long;


struct UnionFind{
    vector<int> par, rank, tsize;//par(x) xの親頂点
    //rank(x) xの属する根付き木の高さ tsize(x) 要素xの属する根付き木に含まれる頂点数
    
    //構造体の初期化
    UnionFind(int n) : par(n,-1), rank(n,0), tsize(n,1) { }

    //根を求める
    int root(int x){
        if(par[x] == -1) return x; // xが根の場合はxを返す
        else return par[x] = root(par[x]); //経路圧縮
    }

    //xとyが同じグループに属するか(根が一致するか)
    bool issame(int x, int y){
        return root(x) == root(y);
    }

    // xを含むグループとyを含むグループを併合する
    bool unite(int x, int y){
        int rx = root(x), ry = root(y);
        if(rx == ry) return false; //すでに同じグループの時は何もしない
        // union by rank
        if(rank[rx] < rank[ry]) swap(rx,ry); //ry側のrankが小さくなるようにする
        par[ry] = rx; //ry を rx　の子とする
        if(rank[rx] == rank[ry]) rank[rx]++; //rx側のrankを調整する
        tsize[rx] += tsize[ry]; // rx側のtsizeを調整する
        return true;
    }

    // xを含む根付き木のサイズを求める
    int size(int x){
        return tsize[root(x)];
    }
};



int main() {
  int n,m;
  cin >> n >> m;
  int u[m],v[m];
  UnionFind uf(n);
  for(int i = 0; i < m; i++){
    cin >> u[i] >> v[i];
    u[i]--,v[i]--;
    uf.unite(u[i],v[i]);
  }
  

  vector<int> rootVcnt(200001,0);
  vector<int> rootEcnt(200001,0);
  for(int i = 0; i < n; i++){
    rootVcnt[uf.root(i)]++;
  }
  for(int i = 0; i < m; i++){
    rootEcnt[uf.root(u[i])]++;
  }

  for(int i = 0; i < n; i++){
    if(rootVcnt[i] != rootEcnt[i]){
      cout << "No" << endl;
      return 0;
    }
  }
  //int vertexcnt = 0;
  //int edgecnt = 0;
  
  
  cout << "Yes" << endl;
}