#include <iostream> //spfp
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <map>
#include <utility> //pair
#include <queue>
#include <set>
#include <iomanip>//setprecision
using namespace std;
using Graph = vector<vector<int> >;
using P = pair<int,int>;

long long mod = 998244353;
 
//const int INF = 1 << 29;

const double PI = 3.1415926535;

int main() {
  int n,k;
  cin >> n >> k;
  int a[1001];
  for(int i = 0; i < k; i++){
    cin >> a[i];
    a[i]--;
  }
  long long x[1001],y[1001];
  for(int i = 0; i < n; i++){
    cin >> x[i] >> y[i];
  }
  
  long long maxR = 0;
  long long minR = 8e18;
  for(int i = 0; i < n; i++){
    minR = 8e18;
    for(int j = 0; j < k; j++){
      //if(i == a[j]) continue; //明かりが自分自身でそれ以外にいないときminRが更新されず大きな値になってしまう
      long long dx = x[i] - x[a[j]];
      long long dy = y[i] - y[a[j]];
      long long R = dx*dx + dy*dy; //ルートを取る前
      minR = min(minR,R);
    }
    maxR = max(maxR,minR);
  }

  printf("%.12lf\n",sqrt((double)maxR));
  
}